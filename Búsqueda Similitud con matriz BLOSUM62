import time
from Bio import SeqIO
import re
import pandas as pd 

# Matriz BLOSUM62 completa
blosum62 = {
    'A': {'A': 4, 'C': 0, 'D': -2, 'E': -1, 'F': -2, 'G': 0, 'H': -2, 'I': -1, 'K': -1, 'L': -1, 'M': -1, 'N': -2, 'P': -1, 'Q': -1, 'R': -2, 'S': 1, 'T': 0, 'V': 0, 'W': -3, 'Y': -2},
    'C': {'A': 0, 'C': 9, 'D': -3, 'E': -4, 'F': -2, 'G': -3, 'H': -3, 'I': -1, 'K': -4, 'L': -1, 'M': -1, 'N': -3, 'P': -2, 'Q': -3, 'R': -3, 'S': -1, 'T': -1, 'V': -1, 'W': -2, 'Y': -2},
    'D': {'A': -2, 'C': -3, 'D': 6, 'E': 2, 'F': -4, 'G': -1, 'H': -1, 'I': -3, 'K': 0, 'L': -4, 'M': -3, 'N': 1, 'P': -1, 'Q': 0, 'R': -2, 'S': 0, 'T': -1, 'V': -2, 'W': -4, 'Y': -3},
    'E': {'A': -1, 'C': -4, 'D': 2, 'E': 5, 'F': -3, 'G': -2, 'H': 0, 'I': -3, 'K': 1, 'L': -3, 'M': -2, 'N': 0, 'P': -1, 'Q': 2, 'R': 0, 'S': 0, 'T': -1, 'V': -2, 'W': -3, 'Y': -2},
    'F': {'A': -2, 'C': -2, 'D': -4, 'E': -3, 'F': 6, 'G': -3, 'H': -1, 'I': 0, 'K': -4, 'L': 0, 'M': 0, 'N': -3, 'P': -4, 'Q': -3, 'R': -3, 'S': -2, 'T': -2, 'V': 0, 'W': 1, 'Y': 3},
    'G': {'A': 0, 'C': -3, 'D': -1, 'E': -2, 'F': -3, 'G': 6, 'H': -2, 'I': -4, 'K': -2, 'L': -4, 'M': -3, 'N': 0, 'P': -2, 'Q': -2, 'R': -2, 'S': 1, 'T': 0, 'V': -2, 'W': -3, 'Y': -3},
    'H': {'A': -2, 'C': -3, 'D': -1, 'E': 0, 'F': -1, 'G': -2, 'H': 8, 'I': -3, 'K': -1, 'L': -2, 'M': -1, 'N': 0, 'P': -2, 'Q': 1, 'R': 0, 'S': -1, 'T': -2, 'V': -3, 'W': -2, 'Y': 2},
    'I': {'A': -1, 'C': -1, 'D': -3, 'E': -3, 'F': 0, 'G': -4, 'H': -3, 'I': 4, 'K': -3, 'L': 2, 'M': 1, 'N': -3, 'P': -4, 'Q': -3, 'R': -3, 'S': -2, 'T': -1, 'V': 3, 'W': -2, 'Y': -1},
    'K': {'A': -1, 'C': -4, 'D': 0, 'E': 1, 'F': -4, 'G': -2, 'H': -1, 'I': -3, 'K': 5, 'L': -2, 'M': -1, 'N': 1, 'P': -1, 'Q': 2, 'R': 1, 'S': 0, 'T': -1, 'V': -2, 'W': -3, 'Y': -2},
    'L': {'A': -1, 'C': -1, 'D': -4, 'E': -3, 'F': 0, 'G': -4, 'H': -2, 'I': 2, 'K': -2, 'L': 4, 'M': 2, 'N': -3, 'P': -4, 'Q': -2, 'R': -2, 'S': -2, 'T': -1, 'V': 1, 'W': -2, 'Y': -1},
    'M': {'A': -1, 'C': -1, 'D': -3, 'E': -2, 'F': 0, 'G': -3, 'H': -1, 'I': 1, 'K': -1, 'L': 2, 'M': 5, 'N': -2, 'P': -3, 'Q': 1, 'R': -1, 'S': -2, 'T': -1, 'V': 1, 'W': -1, 'Y': -1},
    'N': {'A': -2, 'C': -3, 'D': 1, 'E': 0, 'F': -3, 'G': 0, 'H': 0, 'I': -3, 'K': 1, 'L': -3, 'M': -2, 'N': 6, 'P': -2, 'Q': 0, 'R': 0, 'S': 0, 'T': 0, 'V': -3, 'W': -4, 'Y': -2},
    'P': {'A': -1, 'C': -2, 'D': -1, 'E': -1, 'F': -4, 'G': -2, 'H': -2, 'I': -4, 'K': -1, 'L': -4, 'M': -3, 'N': -2, 'P': 7, 'Q': -1, 'R': -2, 'S': -1, 'T': -1, 'V': -2, 'W': -4, 'Y': -3},
    'Q': {'A': -1, 'C': -3, 'D': 0, 'E': 2, 'F': -3, 'G': -2, 'H': 1, 'I': -3, 'K': 2, 'L': -2, 'M': 1, 'N': 0, 'P': -1, 'Q': 5, 'R': 1, 'S': 0, 'T': -1, 'V': -2, 'W': -3, 'Y': -1},
    'R': {'A': -2, 'C': -3, 'D': -2, 'E': 0, 'F': -3, 'G': -2, 'H': 0, 'I': -3, 'K': 1, 'L': -2, 'M': -1, 'N': 0, 'P': -2, 'Q': 1, 'R': 5, 'S': -1, 'T': -1, 'V': -3, 'W': -3, 'Y': -2},
    'S': {'A': 1, 'C': -1, 'D': 0, 'E': 0, 'F': -2, 'G': 1, 'H': -1, 'I': -2, 'K': 0, 'L': -2, 'M': -2, 'N': 0, 'P': -1, 'Q': 0, 'R': -1, 'S': 4, 'T': 1, 'V': -2, 'W': -3, 'Y': -2},
    'T': {'A': 0, 'C': -1, 'D': -1, 'E': -1, 'F': -2, 'G': 0, 'H': -2, 'I': -1, 'K': -1, 'L': -1, 'M': -1, 'N': 0, 'P': -1, 'Q': -1, 'R': -1, 'S': 1, 'T': 5, 'V': 0, 'W': -2, 'Y': -2},
    'V': {'A': 0, 'C': -1, 'D': -2, 'E': -2, 'F': 0, 'G': -2, 'H': -3, 'I': 3, 'K': -2, 'L': 1, 'M': 1, 'N': -3, 'P': -2, 'Q': -2, 'R': -3, 'S': -2, 'T': 0, 'V': 4, 'W': -3, 'Y': -1},
    'W': {'A': -3, 'C': -2, 'D': -4, 'E': -3, 'F': 1, 'G': -3, 'H': -2, 'I': -2, 'K': -3, 'L': -2, 'M': -1, 'N': -4, 'P': -4, 'Q': -3, 'R': -3, 'S': -3, 'T': -2, 'V': -3, 'W': 11, 'Y': 2},
    'Y': {'A': -2, 'C': -2, 'D': -3, 'E': -2, 'F': 3, 'G': -3, 'H': 2, 'I': -1, 'K': -2, 'L': -1, 'M': -1, 'N': -2, 'P': -3, 'Q': -1, 'R': -2, 'S': -2, 'T': -2, 'V': -1, 'W': 2, 'Y': 7}
}


# Función para calcular puntuación de alineación
def calcular_puntuacion(seq1, seq2, matriz):
    puntuacion = 0
    for a, b in zip(seq1, seq2):
        puntuacion += matriz.get(a, {}).get(b, -4)  # Si no hay coincidencia, penalizar
    return puntuacion

# Cargar secuencias de archivos FASTA
def cargar_fasta(file_path):
    sequences = {}
    for record in SeqIO.parse(file_path, "fasta"):
        sequences[str(record.id)] = str(record.seq)
    return sequences

# Cargar proteoma de bacterias en archivo FASTA y epítopos de alfa sinucleina en formato fasta
peptides_file = r"C:\Users\dennys\Desktop\Resultados blosum\Alpha Syn MHC I mouse PTM.fasta"
proteome_file = r"C:\Users\dennys\Desktop\Resultados blosum\UP000406184 F. prausnitzii.fasta"

# Cargar péptidos y proteoma
peptides_dict = cargar_fasta(peptides_file)
proteome_dict = cargar_fasta(proteome_file)

# Inicializar barra de progreso y tiempo
total_peptides = len(peptides_dict)
total_proteins = len(proteome_dict)
start_time = time.time()

# Archivo de resultados
output_file_arriba = r"C:\Users\dennys\Desktop\Resultados blosum\Blosum62 MHC I mouse F. prausnitzii.txt"

with open(output_file_arriba, "w") as f:
    f.write("Resultados de alineamiento entre péptidos y proteínas\n")
    
    for peptide_idx, (peptide_id, peptide_seq) in enumerate(peptides_dict.items(), 1):
        mejor_puntuacion = float('-inf')  # Inicializar mejor puntuación
        mejor_alineacion = None
        mejor_proteina_id = None

        # Obtener longitud del péptido
        peptide_length = len(peptide_seq)

        for protein_id, protein_seq in proteome_dict.items():
            # Recorrer la proteína para encontrar todas las alineaciones posibles
            for i in range(len(protein_seq) - peptide_length + 1):
                aligned_seq = protein_seq[i:i + peptide_length]
                
                # Calcular puntuación
                score = calcular_puntuacion(peptide_seq, aligned_seq, blosum62)

                # Comparar y guardar la mejor puntuación
                if score > mejor_puntuacion:
                    mejor_puntuacion = score
                    mejor_alineacion = aligned_seq
                    mejor_proteina_id = protein_id

        # Guardar la mejor alineación en el archivo
        f.write(f"Péptido ID: {peptide_id} | Secuencia: {peptide_seq}\n")
        f.write(f"Mejor Proteína ID: {mejor_proteina_id} | Secuencia Alineada: {mejor_alineacion}\n")
        f.write(f"Puntuación: {mejor_puntuacion}\n\n")
        
        # Calcular y mostrar progreso
        elapsed_time = time.time() - start_time
        remaining_peptides = total_peptides - peptide_idx
        time_per_peptide = elapsed_time / peptide_idx
        estimated_remaining_time = remaining_peptides * time_per_peptide
        
        # Imprimir barra de progreso
        print(f"Péptidos procesados: {peptide_idx}/{total_peptides} | "
              f"Tiempo estimado restante: {estimated_remaining_time:.2f} segundos", end='\r')

# Tiempo total de ejecución
print(f"\nTiempo total de ejecución: {time.time() - start_time:.2f} segundos")

# Hacer tabla en excel
# Ruta del archivo de resultados
file_path = output_file_arriba
# Ruta de salida del archivo Excel
output_path = r"C:\Users\dennys\Desktop\Resultados blosum\Tabla MHC I mouse F. prausnitzii.xlsx"

# Variables para almacenar los datos
peptide_ids = []
sequences = []
protein_ids = []
aligned_sequences = []
scores = []

# Leer el archivo y extraer los datos
with open(file_path, 'r') as file:
    lines = file.readlines()
    
    for line in lines:
        if line.startswith("Péptido ID"):
            peptide_id = re.search(r'Péptido ID:\s(.+?)\s\|', line).group(1)
            sequence = re.search(r'Secuencia:\s(.+)', line).group(1)
            peptide_ids.append(peptide_id)
            sequences.append(sequence)
        
        elif line.startswith("Mejor Proteína ID"):
            protein_id = re.search(r'Mejor Proteína ID:\s(.+?)\s\|', line).group(1)
            aligned_seq = re.search(r'Secuencia Alineada:\s(.+)', line).group(1)
            protein_ids.append(protein_id)
            aligned_sequences.append(aligned_seq)
        
        elif line.startswith("Puntuación"):
            score = re.search(r'Puntuación:\s(\d+)', line).group(1)
            scores.append(int(score))

# Crear un DataFrame para organizar los datos en formato de tabla
df = pd.DataFrame({
    "Péptido ID": peptide_ids,
    "Secuencia Péptido": sequences,
    "ID Mejor Proteína": protein_ids,
    "Secuencia Alineada en Proteína": aligned_sequences,
    "Puntuación": scores
})

# Guardar el DataFrame en un archivo Excel
df.to_excel(output_path, index=False)
print(f"Archivo Excel guardado en: {output_path}")
