import pandas as pd
import re 

# Paso 1: Generar el diccionario de péptidos de alfa-sinucleína

# Definir la nueva secuencia de la proteína alfa-sinucleína
sequence = "MDVFMKGLSKAKEGVVAAAEKTKQGVAEAAGKTKEGVLYVGSKTKEGVVHGVATVAEKTKEQVTNVGGAVVTGVTAVAQKTVEGAGSIAAATGFVKKDQLGKNEEGAPQEGILEDMPVDPDNEAYEMPSEEGYQDYEPEA"

# Generar péptidos de 8 a 21 aminoácidos a partir de la secuencia
def generate_peptides(sequence, min_length=8, max_length=21):
    peptides = []
    seq_length = len(sequence)
    
    for length in range(min_length, max_length + 1):
        for start in range(seq_length - length + 1):
            peptide = sequence[start:start + length]
            peptides.append(peptide)
    
    return peptides

# Función para renombrar los péptidos
def rename_peptide(peptide_sequence, full_sequence):
    start_position = full_sequence.find(peptide_sequence)
    if start_position == -1:
        return "Not found"
    
    start_position += 1
    peptide_length = len(peptide_sequence)
    new_name = f"{start_position}P{peptide_length}pep"
    return new_name

# Generar péptidos y crear un DataFrame
peptides = generate_peptides(sequence)
data = {
    'New Name': [rename_peptide(peptide, sequence) for peptide in peptides],
    'Epitope - Name': peptides
}
df_peptides = pd.DataFrame(data)

# Guardar el DataFrame como archivo FASTA
output_fasta_path_1 = r"C:\Users\dennys\Desktop\Resultados oficiales\Peptidos AlphaSyn.fasta"

def save_as_fasta(df, output_fasta_path):
    with open(output_fasta_path, 'w') as fasta_file:
        for index, row in df.iterrows():
            new_name = row['New Name']
            sequence = row['Epitope - Name']
            fasta_file.write(f">{new_name}\n")
            fasta_file.write(f"{sequence}\n")

save_as_fasta(df_peptides, output_fasta_path_1)
print(f"Archivo FASTA guardado en: {output_fasta_path_1}")

# Convertir el archivo FASTA a diccionario y guardarlo como TXT
output_dict_path_1 = r"C:\Users\dennys\Desktop\Resultados oficiales\Peptidos AlphaSyn diccionario.txt"
diccionario_peptidos_1 = {}

with open(output_fasta_path_1, 'r') as archivo:
    nombre_peptido = None
    for linea in archivo:
        linea = linea.strip()
        if linea.startswith(">"):
            nombre_peptido = linea[1:]  # Guardar el nombre del péptido sin '>'
        else:
            diccionario_peptidos_1[nombre_peptido] = linea

# Guardar el diccionario en un archivo TXT
with open(output_dict_path_1, 'w') as archivo_txt:
    for nombre, secuencia in diccionario_peptidos_1.items():
        archivo_txt.write(f"{nombre}: {secuencia}\n")

print(f"El diccionario de péptidos se ha guardado en {output_dict_path_1}.")


# Paso 2: Procesar el archivo Excel de epítopos de Alfa-Sinucleína comprobados experimentalmente

# Ruta del archivo Excel
excel_file_path = r"C:\Users\dennys\Desktop\Resultados oficiales\AlphaSyn epítopos MHC II mouse + PTM.xlsx"

# Cargar el archivo Excel
df = pd.read_excel(excel_file_path)

# Función para eliminar modificaciones PTM
def clean_peptide_sequence(peptide_sequence):
    # Limpiar el epítopo, eliminando todo después del "+"
    cleaned_sequence = re.sub(r'\+.*', '', peptide_sequence).strip()
    return cleaned_sequence

# Función para extraer las modificaciones PTM (todo lo que está después del "+")
def extract_ptm(peptide_sequence):
    ptm_match = re.search(r'\+\s*(.*)', peptide_sequence)
    if ptm_match:
        return ptm_match.group(1).strip()  # Captura la modificación después del "+"
    return ""

# Función para renombrar los péptidos con PTM y posición inicial
def rename_peptide_with_ptm_and_position(peptide_sequence, starting_position):
    # Limpiar el epítopo para quitar las modificaciones PTM
    cleaned_peptide = clean_peptide_sequence(peptide_sequence)
    
    # Extraer las modificaciones PTM
    ptm = extract_ptm(peptide_sequence)
    
    # Obtener la longitud del epítopo limpio
    peptide_length = len(cleaned_peptide)
    
    # Verificar si hay una posición de inicio proporcionada
    if pd.notna(starting_position):
        # Generar el nombre en formato "PosiciónPLongitudpep"
        new_name = f"{int(starting_position)}P{peptide_length}pep"
    else:
        # Si no hay posición de inicio, solo usa la longitud
        new_name = f"{peptide_length}pep"
    
    # Añadir la modificación PTM si existe (sin espacio)
    if ptm:
        new_name += ptm
    
    return new_name, cleaned_peptide

# Aplicar la función a cada fila del DataFrame
df[['New Name', 'Cleaned Sequence']] = df.apply(
    lambda row: pd.Series(rename_peptide_with_ptm_and_position(row['Epitope - Name'], row['Epitope - Starting Position'])),
    axis=1
)

# Guardar el archivo modificado como Excel
output_excel_path = r"C:\Users\dennys\Desktop\Resultados oficiales\MHC II mouse renombrados.xlsx"
df.to_excel(output_excel_path, index=False)
print(f"Archivo Excel guardado en: {output_excel_path}")

# Guardar el DataFrame modificado como archivo FASTA
output_fasta_path_2 = r"C:\Users\dennys\Desktop\Resultados oficiales\Alpha Syn MHC II mouse PTM.fasta"

def save_as_fasta(df, output_fasta_path):
    with open(output_fasta_path, 'w') as fasta_file:
        for index, row in df.iterrows():
            new_name = row['New Name']
            sequence = row['Cleaned Sequence']
            fasta_file.write(f">{new_name}\n")
            fasta_file.write(f"{sequence}\n")

save_as_fasta(df, output_fasta_path_2)
print(f"Archivo FASTA guardado en: {output_fasta_path_2}")

# Convertir el archivo FASTA de epítopos a diccionario
output_dict_path_2 = r"C:\Users\dennys\Desktop\Resultados oficiales\Alpha Syn MHC II mouse PTM diccionario.txt"
diccionario_peptidos_2 = {}

with open(output_fasta_path_2, 'r') as archivo:
    nombre_peptido = None
    for linea in archivo:
        linea = linea.strip()
        if linea.startswith(">"):
            nombre_peptido = linea[1:]  # Guardar el nombre del péptido sin '>'
        else:
            diccionario_peptidos_2[nombre_peptido] = linea

# Guardar el diccionario en un archivo TXT
with open(output_dict_path_2, 'w') as archivo_txt:
    for nombre, secuencia in diccionario_peptidos_2.items():
        archivo_txt.write(f"{nombre}: {secuencia}\n")

print(f"El diccionario de péptidos se ha guardado en {output_dict_path_2}.")

# Paso 3: Comparar los diccionarios de peptidos de alfa sinucleina con epítopos comprobados experimentalmente

# Rutas de los diccionarios y resultados
archivo_diccionario1 = output_dict_path_2  # Diccionario del paso 2
archivo_diccionario2 = output_dict_path_1  # Diccionario del paso 1
archivo_salida_txt = r"C:\Users\dennys\Desktop\Resultados oficiales\Resultados comparacion AlphaSyn MHC II mouse PTM.txt"
archivo_salida_excel = r"C:\Users\dennys\Desktop\Resultados oficiales\Resultados comparacion AlphaSyn MHC II mouse PTM.xlsx"
archivo_salida_diccionario_coincidentes = r"C:\Users\dennys\Desktop\Resultados oficiales\Diccionario Coincidencias epitopos AlphaSyn.txt"

# Función para cargar un diccionario desde un archivo
def cargar_diccionario(archivo):
    diccionario = {}
    try:
        with open(archivo, 'r') as f:
            for linea in f:
                linea = linea.strip()
                if linea and ": " in linea:
                    nombre, secuencia = linea.split(": ", 1)
                    diccionario[nombre] = secuencia
    except FileNotFoundError as e:
        print(f"Error: {e}")
    return diccionario

# Función para remover modificaciones PTM
def remover_modificaciones(secuencia):
    return re.sub(r"\s*\+.*", "", secuencia)

# Cargar los diccionarios
diccionario1 = cargar_diccionario(archivo_diccionario1)
diccionario2 = cargar_diccionario(archivo_diccionario2)

# Crear un diccionario sin modificaciones para diccionario2
diccionario2_sin_modificaciones = {nombre: remover_modificaciones(secuencia) for nombre, secuencia in diccionario2.items()}

# Comparar las secuencias
secuencias_coincidentes = []
secuencias_no_en_diccionario2 = []
diccionario_coincidentes = {}  # Nuevo diccionario para las secuencias coincidentes

for nombre, secuencia in diccionario1.items():
    secuencia_sin_modificaciones = remover_modificaciones(secuencia)
    if secuencia_sin_modificaciones in diccionario2_sin_modificaciones.values():
        secuencias_coincidentes.append((nombre, secuencia))
        diccionario_coincidentes[nombre] = secuencia  # Agregar a diccionario de coincidentes
    else:
        secuencias_no_en_diccionario2.append((nombre, secuencia))

# Guardar resultados en un archivo TXT
with open(archivo_salida_txt, 'w') as f:
    f.write("Péptidos con secuencias coincidentes:\n")
    for nombre, secuencia in secuencias_coincidentes:
        f.write(f"{nombre}: {secuencia}\n")
    
    f.write("\nPéptidos que NO coinciden en el segundo diccionario:\n")
    for nombre, secuencia in secuencias_no_en_diccionario2:
        f.write(f"{nombre}: {secuencia}\n")

# Guardar resultados en un archivo Excel
resultados = {
    "Coincidentes": pd.DataFrame(secuencias_coincidentes, columns=["Nombre", "Secuencia"]),
    "No Coincidentes": pd.DataFrame(secuencias_no_en_diccionario2, columns=["Nombre", "Secuencia"]),
}

with pd.ExcelWriter(archivo_salida_excel, engine='openpyxl') as writer:
    resultados["Coincidentes"].to_excel(writer, sheet_name="Coincidentes", index=False)
    resultados["No Coincidentes"].to_excel(writer, sheet_name="No Coincidentes", index=False)

# Guardar el diccionario de coincidentes en un archivo TXT
with open(archivo_salida_diccionario_coincidentes, 'w') as archivo_coincidentes:
    for nombre, secuencia in diccionario_coincidentes.items():
        archivo_coincidentes.write(f"{nombre}: {secuencia}\n")

# Mensaje de confirmación
print(f"Los resultados se han guardado en {archivo_salida_txt}, {archivo_salida_excel}, y {archivo_salida_diccionario_coincidentes}.")


#Paso 4 Comparar coincidencias de epítopos de Alfa-Sinucleína comprobados experimentalmente con mismatch en proteomas de bacterias

from tqdm import tqdm  # Importar tqdm para la barra de progreso
import time  # Para monitorear el tiempo

def load_dictionary(file_path):
    """Carga un diccionario desde un archivo de texto."""
    dictionary = {}
    with open(file_path, 'r') as file:
        for line in file:
            key, sequence = line.strip().split(': ')
            dictionary[key] = sequence
    return dictionary

def load_fasta(file_path):
    """Carga un diccionario desde un archivo FASTA."""
    fasta_dict = {}
    with open(file_path, 'r') as file:
        protein_name = None
        sequence = ""

        for line in file:
            line = line.strip()
            if line.startswith(">"):  # Nueva entrada en el FASTA
                if protein_name and sequence:  # Guardar la secuencia anterior
                    fasta_dict[protein_name] = sequence
                protein_name = line[1:]  # Remover el símbolo '>'
                sequence = ""  # Reiniciar la secuencia
            else:
                sequence += line  # Agregar líneas a la secuencia

        # Agregar la última entrada
        if protein_name and sequence:
            fasta_dict[protein_name] = sequence

    return fasta_dict

def allowed_mismatches(peptide_length):
    """Devuelve el número de mismatches permitidos según la longitud del péptido."""
    if peptide_length <= 10:
        return 1  # Permitir hasta 1 mismatch
    elif 11 <= peptide_length <= 15:
        return 2  # Permitir hasta 2 mismatches
    else:  # Longitudes de 16 a 21
        return 3  # Permitir hasta 3 mismatches

def find_occurrences_with_mismatches(pattern, sequence):
    """Busca coincidencias en una secuencia permitiendo mismatches."""
    matches = []
    pattern_length = len(pattern)
    max_mismatches = allowed_mismatches(pattern_length)

    for i in range(len(sequence) - pattern_length + 1):
        mismatches = sum(1 for j in range(pattern_length) if pattern[j] != sequence[i + j])

        if mismatches <= max_mismatches:
            matches.append((i, sequence[i:i + pattern_length], mismatches))

    return matches

def highlight_mismatches(peptide, protein_match):
    """Resalta las diferencias entre el péptido y la coincidencia en la secuencia de la proteína."""
    highlighted_peptide = ""
    highlighted_protein = ""
    
    for p_residue, prot_residue in zip(peptide, protein_match):
        if p_residue == prot_residue:
            highlighted_peptide += p_residue
            highlighted_protein += prot_residue
        else:
            highlighted_peptide += f"[{p_residue}]"  # Marcar mismatch en el péptido
            highlighted_protein += f"[{prot_residue}]"  # Marcar mismatch en la secuencia de la proteína

    return highlighted_peptide, highlighted_protein

# Cargar los diccionarios
peptides_dict_path = archivo_salida_diccionario_coincidentes 
proteome_fasta_path = r"C:\Users\dennys\Desktop\Resultados oficiales\UP000001031 A. muciniphila.fasta" #Ingresar proteoma de bacteria en archivo FASTA

peptides_dict = load_dictionary(peptides_dict_path)
proteome_dict = load_fasta(proteome_fasta_path)

print(f"Péptidos cargados: {len(peptides_dict)}")
print(f"Proteoma cargado: {len(proteome_dict)}")

results = []

# Inicializar barra de progreso
total_peptides = len(peptides_dict)
total_proteins = len(proteome_dict)
start_time = time.time()  # Tiempo inicial

# Comparar cada péptido con el proteoma
for peptide_key, peptide_seq in tqdm(peptides_dict.items(), desc="Procesando péptidos", total=total_peptides):
    for proteome_key, proteome_seq in tqdm(proteome_dict.items(), desc="Procesando proteínas", leave=False, total=total_proteins):
        matches = find_occurrences_with_mismatches(peptide_seq, proteome_seq)
        if matches:
            for match in matches:
                position, matched_seq, mismatches = match
                highlighted_peptide, highlighted_protein = highlight_mismatches(peptide_seq, matched_seq)
                results.append((peptide_key, proteome_key, position, highlighted_peptide, highlighted_protein, mismatches))

    # Estimar tiempo restante
    elapsed_time = time.time() - start_time  # Tiempo transcurrido
    peptides_processed = list(peptides_dict.keys()).index(peptide_key) + 1  # Peptidos procesados hasta ahora
    remaining_peptides = total_peptides - peptides_processed
    time_per_peptide = elapsed_time / peptides_processed
    estimated_remaining_time = remaining_peptides * time_per_peptide

    print(f"Tiempo restante estimado: {estimated_remaining_time:.2f} segundos")

# Guardar resultados en un archivo
output_results_path = r"C:\Users\dennys\Desktop\Resultados oficiales\Resultados Coincidencias A. muciniphila.txt"

with open(output_results_path, 'w') as output_file:
    for result in results:
        peptide_key, proteome_key, position, highlighted_peptide, highlighted_protein, mismatches = result
        output_file.write(f"Péptido: {peptide_key}, Proteoma: {proteome_key}, Posición: {position},\n")
        output_file.write(f"Coincidencia en péptido: {highlighted_peptide}\n")
        output_file.write(f"Coincidencia en proteoma: {highlighted_protein}\n")
        output_file.write(f"Mismatches: {mismatches}\n\n")

print(f"Resultados guardados en: {output_results_path}")
print(f"Tiempo total de ejecución: {time.time() - start_time:.2f} segundos")
